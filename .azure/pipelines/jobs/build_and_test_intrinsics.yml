parameters:
  name: ''
  vmImage: ''

jobs:
  - job: ${{ parameters.name }}
    displayName: '${{ parameters.name }} build and test'
    pool:
      vmImage: ${{ parameters.vmImage }}
    strategy:
      matrix:
        AVX_disabled:
          COMPlus_EnableAVX: 0
        SSE_disabled:
          COMPlus_EnableSSE: 0
    steps:
      # .NET Core 3 SDK is pre-installed
      #- task: UseDotNet@2
      #  displayName: 'Use dotnet sdk 3.x'
      #  inputs:
      #    version: $(SDK_VERSION)
      #    includePreviewVersions: true

      - bash: |
          export PATH="$(pwd)/dotnet:$PATH"
          echo 'installed sdks:'
          dotnet --list-sdks
          echo "-------------------------------------------------"

          chmod u+x ./build.sh
          ./build.sh build
        displayName: build

      - bash: |
          export PATH="$(pwd)/dotnet:$PATH"
          echo 'installed sdks:'
          dotnet --list-sdks
          echo "-------------------------------------------------"

          if [[ "$COMPLUS_ENABLEAVX" == "0" ]]; then
              export COMPlus_EnableAVX=0
          fi

          if [[ "$COMPLUS_ENABLESSE" == "0" ]]; then
              export COMPlus_EnableSSE=0
          fi

          ./build.sh test
        displayName: test

      - bash: |
          export PATH="$(pwd)/dotnet:$PATH"
          echo 'installed sdks:'
          dotnet --list-sdks
          echo "-------------------------------------------------"

          dotnet tool install -g coverlet.console
          # Workaround
          # https://github.com/Microsoft/azure-pipelines-tasks/issues/8291#issuecomment-441707116
          export PATH="$PATH:$HOME/.dotnet/tools"

          if [[ "$COMPLUS_ENABLEAVX" == "0" ]]; then
              export COMPlus_EnableAVX=0
          fi

          if [[ "$COMPLUS_ENABLESSE" == "0" ]]; then
              export COMPlus_EnableSSE=0
          fi

          ./build.sh coverage
        displayName: code coverage
        condition: and(succeeded(), variables['CODECOV_TOKEN'], ne(variables['Agent.OS'], 'Darwin'))

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
